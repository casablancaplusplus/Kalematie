FORMAT: 1A
HOST: http://polls.apiblueprint.org/

# Kalematie

This is an authenticated API which uses 
[Client Credentials Grant](http://tools.ietf.org/html/rfc6749#section-4.4 "Client Credentials Grant") 
flow of the [OAuth2](http://tools.ietf.org/html/rfc6749 "OAuth2") specification as the authentication mechanism.

To use this API:

+   An application encodes its consumer key and secret into a specially encoded set of credentials.
+   An application makes a request to the POST /api/token endpoint to exchange these credentials for a bearer token.
+   When accessing the REST API, the application uses the bearer token to authenticate.

![Authentication flow](http://upload.wikimedia.org/wikipedia/commons/7/71/Authentication_flow_for_the_Sent.ly_Plus_API.png)

About Client Credentials Grant authorization
=======================
Tokens are passwords
--------------------
Keep in mind that the consumer key & secret, bearer token credentials, and the bearer token itself grant access to make requests on behalf of an application. These values should be considered as sensitive as passwords and must not be shared or distributed to untrusted parties.

SSL absolutely required
-----------------------
This manner of authentication is only secure if SSL is used. Therefore, all requests (both to obtain and use the tokens) m  ust use HTTPS endpoints, which is also a requirement of using API v1.0.

Issuing authenticated requests
================================
Step 1: Encode consumer key and secret
--------------------------------------
The steps to encode an application's consumer key and secret into a set of credentials to obtain a bearer token are:

1.  URL encode the consumer key and the consumer secret according to [RFC 1738](http://www.ietf.org/rfc/rfc1738.txt "RFC 1738").
Note that at the time of writing, this will not actually change the consumer key and secret, but this step should still be performed in case the format of those values changes in the future.

2.  Concatenate the encoded consumer key, a colon character ":", and the encoded consumer secret into a single string.

3.  [Base64 encode](http://en.wikipedia.org/wiki/Base64) the string from the previous step.

Below are example values showing the result of this algorithm. Note that the consumer secret used in this page has been disabled and will not work for real requests.

<table>
    <tr>
        <td>Consumer Key</td>
        <td>M2E5MDdjMmYtZWM1NC00YmRlLTlkY1ItZjE3M2ZmMjY5MTA0</td>
    </tr>
    <tr>
        <td>Consumer Secret</td>
        <td>NGU1Nzg5Y2UtYTYxNy01MDM2LWJiYWYtYzE4Y2I5ZGY2MTcx</td>
    </tr>
    <tr>
        <td>RFC 1738 encoded consumer key<br/>(does not change)</td>
        <td>M2E5MDdjMmYtZWM1NC00YmRlLTlkY1ItZjE3M2ZmMjY5MTA0</td>
    </tr>
    <tr>
        <td>RFC 1738 encoded consumer secret<br/>(does not change)</td>
        <td>NGU1Nzg5Y2UtYTYxNy01MDM2LWJiYWYtYzE4Y2I5ZGY2MTcx</td>
    </tr>
    <tr>
        <td>Bearer token credentials</td>
        <td><b>M2E5MDdjMmYtZWM1NC00YmRlLTlkY1ItZjE3M2ZmMjY5MTA0</b>:NGU1Nzg5Y2UtYTYxNy01MDM2LWJiYWYtYzE4Y2I5ZGY2MTcx</td>
    </tr>
    <tr>
        <td>Base64 encoded bearer token credentials</td>
        <td>TTJFNU1EZGpNbVl0WldNMU5DMDBZbVJsTFRsa1kxSXRaakUzTTJabU1qWTVNVEEwOk<br/>5HVTFOemc1WTJVdFlUWXhOeTAxTURNMkxXSmlZV1l0WXpFNFkySTVaR1kyTVRjeA==</td>
    </tr>
</table>

Step 2: Obtain a bearer token
-----------------------------

The value calculated in step 1 must be exchanged for a bearer token by issuing a request to POST api/token:

-   The request must be a <code>HTTP POST</code> request.
-   The request must include an <code>Authorization</code> header with the value of<br/>
   <code>Basic &lt;base64 encoded value from step 1&gt;.</code>
-   The request must include a <code>Content-Type</code> header with the value of<br/>
<code>application/x-www-form-urlencoded;charset=UTF-8</code>.
-   The body of the request must be <code>grant\_type=client\_credentials</code>.

**Example request (Authorization header has been wrapped):**

    POST /api/token HTTP/1.1
    Host: kalematie.cu
    User-Agent: Kalematie Mobile App
    Authorization: Basic TTJFNU1EZGpNbVl0WldNMU5DMDBZbVJsTFRsa1kxSXRaakUzTTJabU1qWTVNVEEwOk
                         5HVTFOemc1WTJVdFlUWXhOeTAxTURNMkxXSmlZV1l0WXpFNFkySTVaR1kyTVRjeA==
    Content-Type: application/x-www-form-urlencoded;charset=UTF-8
    Content-Length: 29
    Accept-Encoding: gzip
    
    grant_type=client_credentials
If the request was formatted correctly, the server will respond with a JSON-encoded payload:


**Example response (access_token has been wrapped):**

    HTTP/1.1 200 OK
    Status: 200 OK
    Content-Type: application/json; charset=utf-8
    ...
    Content-Encoding: gzip
    Content-Length: 140
    
    {"token_type":"bearer","access_token":"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA%2FAAAAAAAAAAAA
                                           AAAAAAAA%3DAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"}

Applications should verify that the value associated with the <code>token\_type</code> key of the returned object is <code>bearer</code>. The value associated with the access_token key is the bearer token.

Note that one bearer token is valid for an application at a time. Issuing another request with the same credentials to /api/token will return the same token until it is invalidated.

Step 3: Authenticate API requests with the bearer token
-------------------------------------------------------
The bearer token may be used to issue requests to the REST API endpoints. 

To use the bearer token, construct a normal HTTPS request and include an <code>Authorization</code> header with the value of 

<code>Bearer &lt;base64 access_token value from step 2 response&gt;</code> . Signing is not required.


**Example request (Authorization header has been wrapped):**

    GET /api/list HTTP/1.1
    Host: kalematie.cu
    User-Agent: Kalematie Mobile App
    Authorization: Bearer AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA%2FAAAAAAAAAAAA
                          AAAAAAAA%3DAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
    Accept-Encoding: gzip

**Example response**
    
    HTTP/1.1 200 OK
    Status: 200 OK
    Content-Type: application/json; charset=utf-8
    ...
    Content-Encoding: gzip
    
    {"errorMessage":"","errorCode":0, "responseData":"<json response from API>"}

The values associated with the <code>errorMessage</code> key and the <code>errorCode</code> key of the returned
object may be used to see if an error occurred. 

If there is no error, then the value associated with the <code>responseData</code> key of the returned object
will contain the JSON response from the API.


Security Wrapper Errors
---------------------
It is possible that while making an API call, an error occurs. In this section, we will discuss 
security wrapper errors, their meanings and resolutions. The underlying APIs are "wrapped" by a security
layer that makes sure the APIs are not accessed in an unauthorized manner. We shall be discussing errors that
can be generated by this layer.

We shall not be discussing resource specific API errors.
Resource specific API errors will be discussed in the resource API description themselves.

As we see in the table below, all errors related to the security wrapper have an HTTP status code of 500, 400 or 403.

In addition to this HTTP status code, the response itself contains an error code supplied by the API 
security wrapper. This is in contrast to resource specific API errors which all have an HTTP status code of 200.

<table>
<tr>
    <td>Http Status Code</td>
    <td>Kalematie Error Code</td>
    <td>Description</td>
    <td>Scenario</td>
    <td>Resolution</td>
</tr>
<tr>
    <td>500</td>
    <td>10001</td>
    <td>Error creating token</td>
    <td>The token could not be created in the underlying data storage</td>
    <td>May be due to network issues. Try again later</td>
</tr>
<tr>
    <td>403</td>
    <td>10002</td>
    <td>Invalid access token</td>
    <td>The token could not be validated</td>
    <td>Go through the token issuing flow again to obtain a new token</td>
</tr>
<tr>
    <td>400</td>
    <td>10002</td>
    <td>Token was missing in the request</td>
    <td>Authorization header does not contain token</td>
    <td>Authorization header value must be:<br/> <code>Bearer &lt;token&gt;</code></td>
</tr>
<tr>
    <td>400</td>
    <td>10003</td>
    <td>Request needs HTTPS</td>
    <td>An attempt was made to access API using HTTP</td>
    <td>Reissue request using HTTPS</td>
</tr>
<tr>
    <td>500</td>
    <td>10004</td>
    <td>Error setting security principal</td>
    <td>We could not set the security context for your token</td>
    <td>Contact administrator</td>
</tr>
<tr>
    <td>500</td>
    <td>10005</td>
    <td>Error issuing token</td>
    <td>We could not create a token in the underlying storage</td>
    <td>Try again later. If problem persists, contact administrator</td>
</tr>
<tr>
    <td>403</td>
    <td>10006</td>
    <td>Invalid credentials</td>
    <td>We could not validate the supplied credentials</td>
    <td>Send the correct credentials and try again</td>
</tr>
<tr>
    <td>400</td>
    <td>10007</td>
    <td>Request does not contain <code>Authorization</code> header</td>
    <td>A request was made to API without <code>Authorization</code> header present</td>
    <td>Send the request with the <code>Authorization</code> header present</td>
</tr>
<tr>
    <td>403</td>
    <td>10008</td>
    <td>Could not authenticate request</td>
    <td>The request could not be authenticated via an access token</td>
    <td>Go through token issuing flow again and try again with the new token</td>
</tr>
<tr>
    <td>400</td>
    <td>10009</td>
    <td>Body missing grant_type</td>
    <td>The body of the request must be:<br/> <code>grant_type=client_credentials</code></td>
    <td>Reissue request with <code>grant_type=client_credentials</code> present in body</td>
</tr>
<tr>
    <td>400</td>
    <td>10010</td>
    <td>Body missing access token</td>
    <td>Body must contain<br/><code>access_token=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA...</code></td>
    <td>Reissue request with <code>access_token</code> present in body</td>
</tr>
<tr>
    <td>400</td>
    <td>10011</td>
    <td>Base64 decoding failed</td>
    <td>Error while decoding your Base64 encoded credentials string</td>
    <td>Make sure that your Base64 encoding is correct. See <a href="http://en.wikipedia.org/wiki/Base64">Wikipedia</a></td>
</tr>
<tr>
    <td>400</td>
    <td>10012</td>
    <td>Message has incorrect number of parts</td>
    <td>Error while splitting credentials with :</td>
    <td>Make sure that you concatenate the credentials before Base64 encoding in the form <code>consumerSecret:consumerKey</code></td>
</tr>
<tr>
    <td>400</td>
    <td>10013</td>
    <td>Url decoding failed</td>
    <td>Error while url decoding consumerSecret or consumerKey</td>
    <td>Make sure that you correctly URL encode cedentials before concatenating with ':' and Base64 encoding them.</td>
</tr>
<tr>
    <td>400</td>
    <td>10014</td>
    <td>Error calling underlying resource API</td>
    <td>Authentication suceeded, but calling the underlying resource API resulted in an uncaught exception</td>
    <td>If the problem persists, contact administrator</td>
</tr>
</table>

**Example of a security wrapper error response**

    HTTP/1.1 403 Forbidden
    Cache-Control: no-cache
    Pragma: no-cache
    Content-Type: application/json; charset=utf-8
    Expires: -1
    Server: Microsoft-IIS/8.0
    X-AspNet-Version: 4.0.30319
    X-Powered-By: ASP.NET
    Date: Thu, 23 May 2013 15:13:05 GMT
    Content-Length: 123
    
    {"errorMessage":"Please authenticate by a request to /api/token before calling any API methods","errorType":1,"errorCode":10008}

Note the non 200 HTTP Status code and "errorType":1 which indicate that this is a security wrapper error and not an API error.

**Example of an API error response**

All API error responses have a HTTP status code of 200. We will show an example of just one error response that
results while trying to retrieve a list with an id that does not exist. Specific errors related to resources will
be discussed when we discuss the resource API. The error response from a resource API error (and **NOT** from the 
security wrapper layer) is shown below:
    
    HTTP/1.1 200 OK
    Cache-Control: no-cache
    Pragma: no-cache
    Content-Type: application/json; charset=utf-8
    Expires: -1
    Server: Microsoft-IIS/8.0
    X-AspNet-Version: 4.0.30319
    X-Powered-By: ASP.NET
    Date: Thu, 23 May 2013 16:09:11 GMT
    Content-Length: 90
    
    {"errorMessage":"The specified list does not exist.","errorCode":5005,"responseData":null}

One should note that the HTTP status code for this response was 200 and hence it is an resource API error specified
by the API error code in the 5000 range. A detailed discussion of 5000 range API codes will ensue when we talk 
about Resource APIs later.


An alternative for push notification
======================================
Instead of going through the hassle of implementing push notification,
you can calculate the average time quotes created and send a number with the responses
to the app client to tell them when to send requests.

# Group Token

This portion of the API pertains to obtaining a bearer token from the <b>Security Wrapper</b>. The bearer token thus
obtained is passed in the <code>Authorization</code> header in all subsequent requests to the underlying
resource APIs.

Errors that might occur due to this request :

<table>
<tr>
    <td>Http Status Code</td>
    <td>Kalematie Error Code</td>
    <td>Description</td>
    <td>Scenario</td>
    <td>Resolution</td>
</tr>
<tr>
    <td>500</td>
    <td>10001</td>
    <td>Error creating token</td>
    <td>The token could not be created in the underlying data storage</td>
    <td>May be due to network issues. Try again later</td>
</tr>


## Access token [/api/token]

### Get an access token [POST]

Get an access token based on Base64 encoded credentials (as discussed in the section above).

+ Request
    
    + Headers
            
            Athorization: Basic TTJFNU1EZGpNbVl0WldNMU5DMDBZbVJsTFRsa1kxSXRaakUzTTJabU1qWTVNVEEwOk5HVTFOemc1WTJVdFlUWXhOeTAxTURNMkxXSmlZV1l0WXpFNFkySTVaR1kyTVRjeA==
            content-length: 29
            accept-encoding: gzip
            content-type: appliaction/json

    + Body
            
            grant_type = client_credentials


+ Response 200 (appliaction/json)

        {
            "token_type": "Bearer",
            "access_token":"ZTkxMWJkODEtYjUwYy00MzUyLWFhYzEtODI3NWNkMjY0OGFj"
        }


## Token invalidation [/api/invalidate_token]

Should a bearer token become compromised or need to be invalidated for any reason, this API call can be used.
The <code>Authorization</code> header should contain the Base64 encoded credentials. The body of the request
should contain the <code>access_token</code> that needs to be invalidated.

Errors that might occur by making this request :


### Invalidate an access token [POST]

+ access_token (string) - the access token that should be invalidated Which is supposed to belong to u

+ Request
    
    + Headers
        
            Authorization: Basic TTJFNU1EZGpNbVl0WldNMU5DMDBZbVJsTFRsa1kxSXRaakUzTTJabU1qWTVNVEEwOk5HVTFOemc1WTJVdFlUWXhOeTAxTURNMkxXSmlZV1l0WXpFNFkySTVaR1kyTVRjeA==
            Content-Length: 61
            Content-Type: application/x-www-form-urlencoded

    + Body
            
            access_token=ZTkxMWJkODEtYjUwYy00MzUyLWFhYzEtODI3NWNkMjY0OGFj


+ Response 200 (application/json)

        {
            "errorMessage": "",
            "errorCode": 0,
            "responseData" : {
                "accress_token" = "ZTkxMWJkODEtYjUwYy00MzUyLWFhYzEtODI3NWNkMjY0OGFj"
            }
            
        }
        
        
# Group Quote

+ id (number) - the quote's id.
+ text (string) - The actual quote.
+ author_id (number) - The author's ID.
+ date_published (date) - A standard date in which the quote was published.
+ rating (number) - A number between 0 and 10 that represents a quote's rating.
+ viewers (number) - The number of members who viewed the quote and rated it.

## Quotes [/api/quotes]


### Create a new quote [POST]

Create a new quote.
This action creates a quote but is not published unless it gets validated by the monitors who check for their Originality.
They will search for them in the search engines and the archive and if not found, they get published.

Errors that might take place when making this request :

<table>
<tr>
    <td>Http Status Code</td>
    <td>Kalematie Error Code</td>
    <td>Description</td>
    <td>Scenario</td>
    <td>Resolution</td>
</tr>
<tr>
    <td>200</td>
    <td>5001</td>
    <td>Incorrect body format</td>
    <td>The text for the query is missing or there isn't any text parameter</td>
    <td>Format the body correctly and resend it with another request</td>
</tr>
<tr>
    <td>200</td>
    <td>5002</td>
    <td>Body too big</td>
    <td>The number of the body exceeds the permitted limit.</td>
    <td>Provide a shorter quote</td>
    
</tr>
<tr>
    <td>200</td>
    <td>5003</td>
    <td>This quote is not original</td>
    <td>Might be a copy of someone else's quote</td>
    <td>Come up with an original quote and try later</td>
    
</tr>
    <td>200</td>
    <td>5004</td>
    <td>This quote contains forbidden content</td>
    <td>A quote that would contain political or taboo content</td>
    <td>Come up with a more respectable quote</td>
</tr>
</table>

+ text (string) - the quote

+ Request
        
    + Headers
            
            Authorization: Bearer ZTkxMWJkODEtYjUwYy00MzUyLWFhYzEtODI3NWNkMjY0OGFj
            Content-Type: appliaction/json
            
    + Body
            
            {
                "text": "Sometimes I feel like only google understands me."
            }


+ Response 200
    
            {
                "errorMessage":"",
                "errorCode":0,
                "responseData": {
                    "url":"/api/quotes/1"
                }
            }

## Rating [/api/quotes/{quote_id}/rating]

This resource is used to rate quotes or update their rating.


+ Parameters
    + quote_id (required, number) - The id of the quote that is going to be rated
    
    

### Rate a quote [POST]

This action is used to rate a quote or update its rating. You need to provide a number between 0 and 10 
in the body to represent your rating.

User errors that might occur due to this request :

<table>
    <tr>
        <td>Http Status Code</td>
        <td>Kalematie Error Code</td>
        <td>Description</td>
        <td>Scenario</td>
        <td>Resolution</td>
    </tr>
    <tr>
        <td>200</td>
        <td>5005</td>
        <td>Rating number not within the permitted limit</td>
        <td>giving a rating number bigger than 10 or less than 0</td>
        <td>Give a rating number between 0 and 10</td>
    </tr>
    <tr>
        <td>200</td>
        <td>5006</td>
        <td>A member can't rate his own quote.</td>
        <td>A member rated his own quote.</td>
        <td>Don't rate your own quote.</td>
    </tr>
    <tr>
        <td>200</td>
        <td>5007</td>
        <td>Rating a quote that doesn't exist.</td>
        <td>Someone tried to rate a quote that is deleted or doesn't exist.</td>
        <td>Provide a quote_id that belongs to an existing quote</td>
    </tr>
</table>

+ rating (number, required) - A number between 0 and 10 that will represent your rating

+ Request
    
    + Headers
            
            Authorization: Bearer ZTkxMWJkODEtYjUwYy00MzUyLWFhYzEtODI3NWNkMjY0OGFj
            Content-type: application/json

    + Body
        
            {
                "rating": 5.5
            }

+ Response 200
            
            {
                "errorMessage":"",
                "errorCode":0,
                "responseData": null
            }   

## Resource representing a single quote [/api/quotes/{quote_id}]

This resource represents a single quote

+ Parameters
    + quote_id (required, number) - the Id of the single quote we're talking about
    

### Update/Modify a quote [PUT]

This action is used to modify a quote.    
point : modifying a quote puts it in the line for validation and sets the rating to the default

+ text (string) - the text for the new modified quote.
    
+ Request
    
    + Headers
            
            Authorization: Bearer ZTkxMWJkODEtYjUwYy00MzUyLWFhYzEtODI3NWNkMjY0OGFj
            Content-type: application/json

    + Body
    
            {
                "text": "This is the modified quote"
            }
            
+ Response 200

    + Headers
    
            Location: /api/quotes/3
            
            
### Delete a quote [DELETE]

This action is used to delete a quote.

+ Response 200

### Retrieve a quote [GET]

This action is used to retrive a single quote by its Id

+ Response 200 (application/json)

            {
                "id": 1,
                "text": "Sometimes I feel like only google understands me!",
                "author_id": 999,
                "date_published": "2014-11-11T08:40:51.620Z",
                "rating": 8.3,
                "viewers": 1000000
            }
            
            
## Quote Collection [/api/quotes?{idrange}&{ratingrange}&{authorid}&{authorrating}&{daterange}]

resource for operating on a collection of quotes

+ Parameters
    + idrange (optional, number range) - An Id range with the format min-max e.g 11-21
    + authorid (optional, number) - The Id of the author who's quotes should be retrieved
    + authorrating (optional, number) - The rating of the authors who's quotes should be retrieved.
    + daterange (optional, date) - The date range with the format min-max where min and max should be standard dates.
    + ratingrange (optional, number) - A range range with the format min-max e.g 3.8-9  the min and max shoudl be numbers bewteen 0 and 10.



### Retrieve a quote collection [GET]

+ Response 200 (application/json)

            {
                "quote_collection":[
                    {
                        "id": 1,
                        "text": "blah blah blah",
                        "author_id": 345,
                        "date_published": "2014-11-11T08:40:51.620Z",
                        "rating": 8.3,
                        "viewers": 3000000
                    }, {
                        
                        "id": 55,
                        "text": "bulshit",
                        "author_id": 444,
                        "date_published": "2014-11-11T08:40:51.620Z"
                        "rating": 4.5,
                        "viewers": 32434
                    }
                    
                ]
                
            }
            
            
# Group Authors

Authors have the following attributes :

+ id (number) - A unique Id to represent a single author
+ firstname (string)
+ lastname (string)
+ phonenumber (number) - the users phone number
+ password (string)
+ rating (number) - a number between 0 and 10 representing the user's rating

User Registration
-----------------
Here is how it works ?
the user sends a phone number and password to the server.
the server validates the phone and the password
the server sends a verification code to the user
point : the verification code will be stored on the device to be mixed with the password when authenticating
the client then recreate a password using the verification code and the user provided password and sends them to the token production resources.


## Authors [/api/authors]

### Add a new author [POST]

+ Request

    + Headers
        
            
            Content-Type: application/json

    + Body
            
            {
                "firstname": "Nazar",
                "lastname": "Abdolkhanie",
                "phonenumber": 9169211845,
                "password": "secret"
                
            }
            
+ Response 200

    
        